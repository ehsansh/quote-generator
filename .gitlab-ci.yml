# .gitlab-ci.yml - At the root of your quote-generator project

stages:
  - prepare
  - build_images
  - test
  - deploy

# --------------------------------------------------------------------------------------------------
# 1. Prepare Stage: Linting and basic checks for both frontend and backend
# --------------------------------------------------------------------------------------------------
say_hello:
  stage: prepare
  image: alpine
  script: |
    echo "Starting CI/CD Pipeline for Quote Generator ($CI_COMMIT_SHORT_SHA)"
    echo "Running on branch: $CI_COMMIT_BRANCH"

lint_check_frontend:
  stage: prepare
  image: node:20
  cache:
    key: "$CI_COMMIT_REF_SLUG-frontend-node-modules"
    paths:
      - frontend/node_modules/
  script:
    - echo "--- Running Frontend Lint Check ---"
    - cd frontend
    - npm ci
    - npm run lint
  allow_failure: false

lint_check_backend:
  stage: prepare
  image: node:20
  cache:
    key: "$CI_COMMIT_REF_SLUG-backend-node-modules"
    paths:
      - backend/node_modules/
  script:
    - echo "--- Running Backend Lint Check ---"
    - cd backend
    - npm ci
    - npm run lint
  allow_failure: false

# --------------------------------------------------------------------------------------------------
# 2. Build Images Stage: Build Docker images for both services and push to registry
#    These jobs will only run on the default branch (main/master)
# --------------------------------------------------------------------------------------------------
build_backend_image:
  stage: build_images
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "--- Building and Pushing Backend Docker Image ---"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA ./backend
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/backend:latest
    - docker push $CI_REGISTRY_IMAGE/backend:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs: ["lint_check_backend"]

build_frontend_image:
  stage: build_images
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "--- Building and Pushing Frontend Docker Image ---"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA ./frontend
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/frontend:latest
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs: ["lint_check_frontend"]

# --------------------------------------------------------------------------------------------------
# 3. Test Stage: Unit and Integration tests for both services
# --------------------------------------------------------------------------------------------------
test_frontend_unit:
  stage: test
  image: node:20
  cache:
    key: "$CI_COMMIT_REF_SLUG-frontend-node-modules"
    paths:
      - frontend/node_modules/
  script:
    - echo "--- Running Frontend Unit Tests ---"
    - cd frontend
    - npm ci
    - npm test
  needs: ["lint_check_frontend"]

test_backend_unit:
  stage: test
  image: node:20
  cache:
    key: "$CI_COMMIT_REF_SLUG-backend-node-modules"
    paths:
      - backend/node_modules/
  script:
    - echo "--- Running Backend Unit Tests ---"
    - cd backend
    - npm ci
    - npm test
  needs: ["lint_check_backend"]

integration_test:
  stage: test
  image: docker/compose:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "--- Running Integration Tests ---"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose up -d --force-recreate --pull=always frontend backend
    - docker-compose ps
    - sleep 15
    - echo 'Running a simple integration test:' "Fetching from frontend through Nginx to backend"
    - apk add --no-cache curl
    - curl --fail --silent http://frontend:80/api/quote | grep "quote"
    - echo "Integration test passed!"
  needs:
    - build_backend_image
    - build_frontend_image
  after_script:
    - echo "--- Cleaning up containers after Integration Test ---"
    - docker-compose down

# --------------------------------------------------------------------------------------------------
# 4. Deploy Stage: Simple placeholder for deployment
# --------------------------------------------------------------------------------------------------
deploy_app:
  stage: deploy
  image: alpine/git:latest
  script:
    - echo "--- Deploying application to production/staging ---"
    - echo 'Frontend image:' "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA"
    - echo 'Backend image:' "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA"
    - echo "Deployment commands would go here."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs: ["integration_test"]